package transportc

import (
	"errors"
	"io"
)

type SignalMethod interface {
	// MakeOffer sends the SDP offer generated by offerer to the answerer.
	//
	// Called by OFFERER (#1)
	MakeOffer(offer []byte) error

	// GetOffer SHOULD return an error if Offer is not yet received/available.
	// However, blocking until an offer is received is also acceptable.
	//
	// Called by ANSWERER (#2)
	GetOffer() ([]byte, error)

	// Answer sends the SDP answer generated by answerer to the offerer.
	//
	// Called by ANSWERER (#3)
	Answer(answer []byte) error

	// GetAnswer blocks until the next SDP answer is available.
	//
	// Called by OFFERER (#4)
	GetAnswer() ([]byte, error)
}

var (
	// SignalMethodManual won't automatically establish a connection.
	// The connection will be established once both party have called SetRemoteDescription.
	SignalMethodManual SignalMethod = nil
)

// IOSignal implements a minimalistic signaling method.
// Offerer's writer should write to the answerer's reader and vice versa.
type DebugSignal struct {
	offers  chan []byte
	answers chan []byte
}

func NewIOSignal(w io.Writer, r io.Reader) *DebugSignal {
	return &DebugSignal{
		offers:  make(chan []byte),
		answers: make(chan []byte),
	}
}

// MakeOffer implements SignalMethod.MakeOffer.
// It writes the SDP offer to offers channel.
func (ds *DebugSignal) MakeOffer(offer []byte) error {
	ds.offers <- offer
	return nil
}

// GetOffer implements SignalMethod.GetOffer
// It reads the SDP offer from offers channel.
func (ds *DebugSignal) GetOffer() ([]byte, error) {
	if len(ds.offers) == 0 {
		return nil, errors.New("no offer available")
	}
	offer := <-ds.offers
	return offer, nil
}

// Answer implements SignalMethod.Answer.
// It writes the SDP answer to answers channel.
func (ds *DebugSignal) Answer(answer []byte) error {
	ds.answers <- answer
	return nil
}

// GetAnswer implements SignalMethod.GetAnswer
// It reads the SDP answer from answers channel.
func (ds *DebugSignal) GetAnswer() ([]byte, error) {
	answer := <-ds.answers
	return answer, nil
}
